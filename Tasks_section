Task1:

Get two strings from user,

string1: wikipedia
string2: typescript

Identify middle chars of both strings

output: p  +  c   ===> ascii value of p + ascii value of c  ====>  198


Task2:

Get two integers from user

int1: 123
int2: 456

output: 123456579 (concatenation of int1,int2 and addition of two integers) 

Task3:

Collect three strings from user
String format: (name<space>float)

string1: "ravi 10.30"  
string2: "meghala 12.19"
string3: "Gokul 20.20"

split + indexing

10.30 + 12.19 + 20.20 ===> output 42.69

Task4:

Li1 = [2,3,4,5,[45,56,67,78,[111,222,333,[5555,3333,[10000,50000,"python","computer"],1111,7777,8888],444,555,666,777],89,23,34]]


Extract below values: 
5
56
222
50000
put
5555
7777
666
89
on
333
3333

Task5:

#create a dictionary
#{1:["english","maths","science"], 2:[10,20,30], 3:["bio-botany","bio-zoology","Algebra"]}
#Extract "botany" from above dictionary
#Extract "gebra" from above dictionary
#print all keys in dictionary and convert it into tuple
#Find the average of all numbers available under key "2"

Task6:
Get two strings from user:

string1: python
String2: java

output ===> jythonpava64hv (string2 first letter + string1 except first letter + string1 first letter + string2 except first letter + len of str1 + len of string2 )

Task7:

Get two strings from user

string1:  master
string2:  python

Output:  mason  (Concatenation of first part of string1 + second part od string 2)

string1: encyclopedia
string2: social

output: encyclal

Task8:

Get two strings from user  example: "java" "groovy"
   java6groovy4
   
   "pi" "mathematics"  ===> pi15mahematics2
   
Task9:

Get two values (input) ===> number, string

#7 , "python" ===> pythonpythonpythonpythonpythonpythonpython777777

#3 , "perl"   ===> perlperlperl3333


Task10:

#get two strings from user  computer science  ==> input 

#step 1 ==> comPuter  sciEnce

#step 2 ===> concatenate both ==> comPutersciEnce

#step 3 ===> comPuteRsciEnce


=================
Conditional statements tasks:
=================


Get a number from user check whether postive or negative
Get a number from user check whether odd or even
Get a character from user check whether small case or upper case
Get a string from user check whether length is even or odd
Get list from user check whether length is odd or even

#program1
#Get one string from user
#extract middle letter of the string
#check whether middle letter is vowel or no

#program2
#Get one string from user
#Find the middle letter
#find ascii value for the middle letter
#check whether ascii value is odd or even

#program3:
#get one string from user
#check whether length of the string is odd or even

#program4:
#Get one string from user
#check whether string is palindrome or no

#program5:
#Get one mark from student
#mark 0 to 100 otherwise invalid mark

#50 + PASS otherwise FAIL
#90 to 100 ===> A  ==> Even + Odd -
#80 to 89 ===> B
#70 to 79 ===> C
#60 to 69 ===> D
#50 to 59 ===> E

#0 to 49 ===> FAIL


#93 ===> A-
#99 ===> A-
#88 ====> B+

#78

#VALID MARK
#PASS MARK
#B+

#program6

#hackerrank Write a function

#program7
#hackerrank Python If-Else

#program8 

#two strings from user
#string 1: python  ==> first + middle + last 
#string 2: ptn

#valid otherwise invalid

#program9:

#two strings from user

#mathematics ===> 4 vowels
#science ==> 3 vowels

#both are equal count or not equal

#program10

#get one integer from user
#armstrong or no (without using loops)

#153 ===> 1^3 + 5^3 + 3^3
#370 ===> 3^3 + 7^3 + 0^3
#371 ====> 3^3 + 7^3 + 1^3


#program 11:
#[123, 124, 125,]  length of list odd or even


#program12:
#Fizz buzz
#Get one number from user
#5
#Multiple of 3 ==> Fizz
#Multiple of 5 ===> buzz
#Multiple of 3 and 5 ===> Fizzbuzz
#None ==> Invalid number


  
  

